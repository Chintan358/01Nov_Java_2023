Variables : 
************************
a variable is a user-defined or a user-readable custom name 
assigned to a memory location. Variables hold a value that 
can be modified and reused many times during the program 
execution.

Variable naming rules : 
**************************

A variable name can consist of Capital letters A-Z, lowercase letters a-z digits 0-9, and two special characters such as _ underscore and $ dollar sign.
The first character must not be a digit.
Blank spaces cannot be used in variable names.
Java keywords cannot be used as variable names.
Variable names are case-sensitive.
There is no limit on the length of a variable name but by convention, it should be between 4 to 15 chars.
Variable names always should exist on the left-hand side of assignment operators.

Variable naming convention
****************************
It should start with a lowercase letter such as id, name.
It should not start with the special characters like & (ampersand), $ (dollar), _ (underscore).
If the name contains multiple words, start it with the lowercase letter followed by an uppercase letter such as firstName, lastName.
Avoid using one-character variables such as x, y, z.

class/interface : 
It should start with the uppercase letter.
It should be a noun such as Color, Button, System, Thread, etc.
Use appropriate words, instead of acronyms.

package : 
It should be a lowercase letter such as java, lang.
If the name contains multiple words, it should be separated by dots (.) such as java.util, java.lang.

method : 
It should start with lowercase letter.
It should be a verb such as main(), print(), println().
If the name contains multiple words, start it with a lowercase letter followed by an uppercase letter such as actionPerformed().
***********************************************
Datatypes : 
********************
byte	0	1 byte  2^7 - 1 to -2^7 : 127 to -128
short	0	2 byte  2^15-1 to -2^15 : 32767 to -32768
int		0	4 byte
long	0	8 byte

float	0.0	4 byte
double	0.0	8 byte

char 		2 byte
boolean	false	1 bit

1 bit
8 bit = 1 byte
1024 byte = 1kb
1024 kb = 1mb
1024 mb = 1 gb
1024 gb = 1 tb

datatype casting : 
-convert one type of data into another type

widening or implicite
nerrowing or explicite

********************************
Oprators : 

1 : Unary
++pre,--pre,post++,post--

2 : Arithmatic
+,-,*,/,%

3 : Relational
<,>,<=,>=,==,!=

4 : Logical
&& , ||

OOPS : 

class
object
inheritance
polymorphism
abstraction
encaptulation

Object : Realtime entity

state   / variables /data memeber
behaviour / methods / function member

class : logical entity
-collection of data member and function member

method : 
accesModifier returnType* methodName*(args)
{
	//body
}

class Pen
{
	int price;
	String color;
	String company;

	public void toWrite()
	{
		//body
	}
}

**************************
Abstraction : 

Hiding implimantation and showing functionality

there are 2 ways to achieve abstration in java
1 : Abstract class : partial : containd both instance and 
abstract method
2 : interface : 100% : contains only abstract mthod

*****************************
Abstract method : method without body

ex : public void display();

Instance method : method with body
ex : public void display()
	{
	}
	
*******************************************************
Important Classes
*******************
String
String buffer
String builder
Object
Wrapper














