Database : MYSQL

SQL : structure query language.
***********************************
C - create
R - read
U - update
D - delete
**********************************
SQL commands
************
DDL : data defination lang.
create : it creates databse or table
alter : to make changes in table after creation
drop : to remove database or table
truncate : to remove all data from table, table strucure remain as it is.

Database : 
CREATE DATABASE 01nov;
USE 01nov;
DROP DATABASE 01nov;

Table : 
there are two types of constrains
1 : datatype
int
varchar
double
Date
blob
clob

2 : key
uniqe key : duplication not allowed
notnull key : null value not allowed
primary key : unique + notnull
foreign key : realtionship between tables

CREATE TABLE student(id INT PRIMARY KEY, NAME VARCHAR(20), email VARCHAR(50));
CREATE TABLE student(id INT PRIMARY KEY, NAME VARCHAR(20), email VARCHAR(50));

ALTER TABLE student ADD COLUMN phno INT;
ALTER TABLE student MODIFY COLUMN phno VARCHAR(10);
ALTER TABLE student DROP COLUMN phno
ALTER TABLE student RENAME TO STD;
ALTER TABLE student CHANGE COLUMN uname email VARCHAR(50); 

TRUNCATE STD;

DROP TABLE STD;

*************************************************************************************************
DML : data manipulation lang.
********************************
Insert
Update
Delete

INSERT INTO student VALUES(2,"abc","abc@gmail.com");
INSERT INTO student(NAME) VALUES("Test");
UPDATE student SET email="test@gmial.com",id=5 WHERE NAME="test";
DELETE FROM student WHERE id=1;


DQL : data query lang. 
***********************************************
select

SELECT * FROM emp;

SELECT NAME,dept FROM emp;

SELECT DISTINCT dept FROM emp;

SELECT * FROM emp WHERE dept = 'java'

SELECT * FROM emp WHERE dept = 'java' OR dept='SQL'
SELECT * FROM emp WHERE dept='java' AND sal>5000

SELECT * FROM emp WHERE dept IN('java','sql','ios');
SELECT * FROM emp WHERE dept NOT IN('ios');

SELECT * FROM emp WHERE sal BETWEEN 5000 AND 7000;
SELECT * FROM emp WHERE sal>=2000 AND sal<=5000

SELECT * FROM emp WHERE NAME LIKE 'Man%';
SELECT *FROM emp WHERE NAME LIKE '%k';
SELECT * FROM emp WHERE NAME LIKE '_a%';
SELECT * FROM emp WHERE NAME LIKE '%i%';

SELECT * FROM emp ORDER BY NAME;
SELECT * FROM emp ORDER BY NAME DESC;

SELECT MAX(sal) FROM emp;
SELECT MIN(sal) FROM emp;
SELECT SUM(sal) FROM emp;
SELECT AVG(sal) FROM emp;
SELECT COUNT(email) FROM emp;

SELECT COUNT(DISTINCT dept) AS totaldept FROM emp;



MAX
SELECT * FROM emp WHERE sal= (SELECT MAX(sal) FROM emp)

secondmax

SELECT * FROM emp WHERE sal = (
SELECT MAX(sal) FROM emp WHERE sal< (SELECT MAX(sal) FROM emp));


SELECT * FROM emp LIMIT 2,4;

SELECT * FROM emp ORDER BY sal DESC LIMIT 0,1
SELECT * FROM emp ORDER BY sal DESC LIMIT 1,1
SELECT * FROM emp ORDER BY sal  LIMIT 0,1

SELECT * FROM emp WHERE sal IN(
SELECT MAX(sal) FROM emp GROUP BY dept);
*******************************************************************************

DCL : data control lang.
commit
rollback

START TRANSACTION;


DELETE FROM emp WHERE id=2;
SAVEPOINT a;
UPDATE emp SET dept='php'WHERE id=4;
SAVEPOINT b;
DELETE FROM emp WHERE id=6;


COMMIT;

ROLLBACK TO b;

**************************************************************************
**************************************************************************
Normalisation
**************
CREATE TABLE author(aid INT PRIMARY KEY AUTO_INCREMENT, aname VARCHAR(20));

CREATE TABLE book(bid INT PRIMARY KEY AUTO_INCREMENT, bname VARCHAR(20), price DOUBLE, aid INT, FOREIGN KEY(aid) REFERENCES author(aid));

joins : 
inner join
ex : 
SELECT book.bname,author.aname FROM book JOIN author ON book.aid=author.aid
SELECT b.bname,a.aname FROM book b JOIN author a ON b.aid=a.aid

outer join
-left
SELECT b.bname,a.aname FROM book b LEFT JOIN author a ON b.aid=a.aid
-right

SELECT b.bname,a.aname FROM book b RIGHT JOIN author a ON b.aid=a.aid

-full
SELECT b.bname,a.aname FROM book b LEFT JOIN author a ON b.aid=a.aid UNION
SELECT b.bname,a.aname FROM book b RIGHT JOIN author a ON b.aid=a.aid


****************************************************************************
View : 

CREATE
  
    VIEW `01nov`.`empview` 
    AS
(SELECT NAME,dept FROM emp);

*****************************
Stored Proceduger : 

1 : simple
DELIMITER $$

CREATE
   
    PROCEDURE `01nov`.`empdata`()
   
	BEGIN
	SELECT * FROM emp;
	END$$

DELIMITER ;

call empdata()
**************************************
2 : In

DELIMITER $$

CREATE
  
    PROCEDURE `01nov`.`empbyid`(IN uid INT)
   
	BEGIN
		SELECT * FROM emp WHERE id=uid;
	END$$

DELIMITER ;

call empbyid(5)
********************************************
3 : out

DELIMITER $$

CREATE
 
    PROCEDURE `01nov`.`deptcount`(OUT deptcount INT)
    
	BEGIN
		SELECT COUNT(DISTINCT dept) INTO deptcount FROM emp;
	END$$

DELIMITER ;


CALL deptcount(@dept);
SELECT @dept

***************************************
4 InOUT

DELIMITER $$

CREATE
  
    PROCEDURE `01nov`.`salbyid`(INOUT number INT)
  
	BEGIN
	SELECT sal INTO number FROM emp WHERE id=number;
	END$$

DELIMITER ;


SET @num=3;
CALL salbyid(@num);
SELECT @num

*****************************************
trigger

DELIMITER $$

CREATE
    /*[DEFINER = { user | CURRENT_USER }]*/
    TRIGGER `01nov`.`oldsal` BEFORE UPDATE
    ON `01nov`.`emp`
    FOR EACH ROW BEGIN
	INSERT INTO oldsal(NAME,sal) VALUE(old.name,old.sal);
    END$$

DELIMITER ;

**********
function

DELIMITER $$

CREATE
    
    FUNCTION `01nov`.`test`()
    RETURNS INT

    BEGIN
        DECLARE data1 INT;
	SELECT COUNT(*) INTO data1 FROM crud;
	RETURN data1;
    END$$

DELIMITER ;














